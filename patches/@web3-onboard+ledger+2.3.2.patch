diff --git a/node_modules/@web3-onboard/ledger/dist/index.js b/node_modules/@web3-onboard/ledger/dist/index.js
index 12bf9df..01fb4f1 100644
--- a/node_modules/@web3-onboard/ledger/dist/index.js
+++ b/node_modules/@web3-onboard/ledger/dist/index.js
@@ -1,7 +1,12 @@
 // these cannot be dynamically imported
 import { TypedDataUtils } from '@metamask/eth-sig-util';
+import { stripHexPrefix, keccak } from 'ethereumjs-util'
+
 const LEDGER_LIVE_PATH = `m/44'/60'`;
 const LEDGER_DEFAULT_PATH = `m/44'/60'/0'`;
+const ROOTSTOCK = `m/44'/137'/0'/0`;
+const ROOTSTOCK_TEST = `m/44'/37310'/0'/0`;
+
 const DEFAULT_BASE_PATHS = [
     {
         label: 'Ledger Live',
@@ -10,16 +15,44 @@ const DEFAULT_BASE_PATHS = [
     {
         label: 'Ledger Legacy',
         value: LEDGER_DEFAULT_PATH
-    }
+    },
+    {
+        label: 'Rootstock Path',
+        value: ROOTSTOCK
+    },
+    {
+        label: 'Rootstock Testnet Path',
+        value: ROOTSTOCK_TEST
+    },
 ];
 const assets = [
     {
-        label: 'ETH'
+        label: 'RBTC'
     }
 ];
 const supportsWebUSB = () => Promise.resolve(!!navigator &&
     !!navigator.usb &&
     typeof navigator.usb.getDevices === 'function');
+
+/**
+ * @description Implements EIP-1191 Address Checksum
+ * @param _address
+ * @param _chainId
+ * @returns checksummed address
+ */
+export function toChecksumAddress(_address, _chainId = "") {
+    const address = stripHexPrefix(_address).toLowerCase()
+    const chainId = parseInt(_chainId)
+    const prefix = !isNaN(chainId) ? `${chainId.toString()}0x` : ""
+    const hash = keccak(Buffer.from(`${prefix}${address}`)).toString("hex")
+    return (
+      "0x" +
+      address
+        .split("")
+        .map((b, i) => (parseInt(hash[i], 16) >= 8 ? b.toUpperCase() : b))
+        .join("")
+    )
+  };
 /**
  * Returns the correct ledger transport based on browser compatibility for webUSB.
  * @returns
@@ -31,7 +64,9 @@ const getAccount = async (derivationPath, asset, index, provider, eth) => {
     const dPath = derivationPath === LEDGER_LIVE_PATH
         ? `${derivationPath}/${index}'/0/0`
         : `${derivationPath}/${index}`;
-    const { address } = await eth.getAddress(dPath);
+    let { address } = await eth.getAddress(dPath);
+    //Matching rootstock checksum
+    address = toChecksumAddress(address);
     return {
         derivationPath: dPath,
         address,
@@ -95,8 +130,14 @@ function ledger({ customNetwork, filter } = {}) {
                         // Checks to see if this is a custom derivation path
                         // If it is then just return the single account
                         if (derivationPath !== LEDGER_LIVE_PATH &&
-                            derivationPath !== LEDGER_DEFAULT_PATH) {
-                            const { address } = await eth.getAddress(derivationPath);
+                            derivationPath !== LEDGER_DEFAULT_PATH &&
+                            derivationPath !== ROOTSTOCK &&
+                            derivationPath !== ROOTSTOCK_TEST
+                            ) {
+                            let { address } = await eth.getAddress(derivationPath);
+                            if(derivationPath.includes("m/44'/137") || derivationPath.includes("m/44'/37310")){
+                                address = toChecksumAddress(address)
+                              }
                             return [
                                 {
                                     derivationPath,
